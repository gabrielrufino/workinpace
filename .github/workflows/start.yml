name: Start

on:
  workflow_dispatch:
    inputs:
      vscode:
        type: boolean
        default: false
      pgadmin:
        type: boolean
        default: false
      postgresql:
        type: boolean
        default: false
      redisinsight:
        type: boolean
        default: false
      hoppscotch:
        type: boolean
        default: false

env:
  SERVER_SSH_HOST: ${{ secrets.SERVER_SSH_HOST }}
  SERVER_SSH_USER: ${{ secrets.SERVER_SSH_USER }}
  SERVER_SSH_PASSWORD: ${{ secrets.SERVER_SSH_PASSWORD }}
  SERVER_SSH_PORT: ${{ secrets.SERVER_SSH_PORT }}
  DOMAIN: ${{ secrets.DOMAIN }}
  ACME_EMAIL: ${{ secrets.ACME_EMAIL }}

jobs:
  validation:
    name: Validates variables
    runs-on: ubuntu-latest
    steps:
      - if: ${{ env.SERVER_SSH_HOST == '' || env.SERVER_SSH_USER == '' || env.SERVER_SSH_PASSWORD == '' || env.SERVER_SSH_PORT == '' || env.DOMAIN == '' || env.ACME_EMAIL == '' }}
        run: exit 1
  htpasswd:
    name: Install htpasswd
    runs-on: ubuntu-latest
    needs:
      - validation
    steps:
      - name: Install htpasswd using SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.SERVER_SSH_HOST }}
          username: ${{ env.SERVER_SSH_USER }}
          password: ${{ env.SERVER_SSH_PASSWORD }}
          port: ${{ env.SERVER_SSH_PORT }}
          script: |
            if [ ! $(which htpasswd) ]
            then
              apt update
              apt install apache2-utils -y
            fi
  docker:
    name: Install docker
    runs-on: ubuntu-latest
    needs:
      - validation
    steps:
      - name: Install docker using SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.SERVER_SSH_HOST }}
          username: ${{ env.SERVER_SSH_USER }}
          password: ${{ env.SERVER_SSH_PASSWORD }}
          port: ${{ env.SERVER_SSH_PORT }}
          script: |
            if [ ! $(which docker) ]
            then
              apt remove docker docker-engine docker.io containerd runc -y
              apt update
              apt install \
                ca-certificates \
                curl \
                gnupg \
                lsb-release -y
              mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
                $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
              apt update
              apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
            fi
  git:
    name: Install git
    runs-on: ubuntu-latest
    needs:
      - validation
    steps:
      - name: Install git using SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.SERVER_SSH_HOST }}
          username: ${{ env.SERVER_SSH_USER }}
          password: ${{ env.SERVER_SSH_PASSWORD }}
          port: ${{ env.SERVER_SSH_PORT }}
          script: |
            if [ ! $(which git) ]
            then
              apt update
              apt install git -y
            fi
  ufw:
    name: Install ufw
    runs-on: ubuntu-latest
    needs:
      - validation
    steps:
      - name: Install ufw using SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.SERVER_SSH_HOST }}
          username: ${{ env.SERVER_SSH_USER }}
          password: ${{ env.SERVER_SSH_PASSWORD }}
          port: ${{ env.SERVER_SSH_PORT }}
          script: |
            if [ ! $(which ufw) ]
            then
              apt update
              apt install ufw -y
            fi

            if [ ! $(which ufw-docker) ]
            then
              wget -O /usr/local/bin/ufw-docker \
                https://github.com/chaifeng/ufw-docker/raw/master/ufw-docker
              chmod +x /usr/local/bin/ufw-docker
            fi
  compose:
    name: Setup compose
    runs-on: ubuntu-latest
    needs:
      - git
    steps:
      - name: Clone compose using SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.SERVER_SSH_HOST }}
          username: ${{ env.SERVER_SSH_USER }}
          password: ${{ env.SERVER_SSH_PASSWORD }}
          port: ${{ env.SERVER_SSH_PORT }}
          script: |
            DOCKER_COMPOSE_FOLDER=$HOME/docker-compose.yml
            if [ ! -d $DOCKER_COMPOSE_FOLDER ]
            then
              git clone https://github.com/gabrielrufino/docker-compose.yml.git $DOCKER_COMPOSE_FOLDER
              cd $DOCKER_COMPOSE_FOLDER
            else
              cd $DOCKER_COMPOSE_FOLDER
              git pull
            fi
            printf "# Environment variables\n\n" > .env
  firewall:
    name: Setup firewall
    runs-on: ubuntu-latest
    needs:
      - ufw
    steps:
      - name: Setup firewall using SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.SERVER_SSH_HOST }}
          username: ${{ env.SERVER_SSH_USER }}
          password: ${{ env.SERVER_SSH_PASSWORD }}
          port: ${{ env.SERVER_SSH_PORT }}
          script: |
            ufw --force enable
            ufw-docker install

            ufw allow ssh
            ufw allow http
            ufw allow https
            ufw reload
  traefik:
    name: Starts traefik
    runs-on: ubuntu-latest
    needs:
      - docker
      - compose
      - firewall
    steps:
      - name: Setup traefik
        uses: appleboy/ssh-action@v0.1.7
        env:
          TRAEFIK_DASHBOARD_USERNAME: ${{ secrets.TRAEFIK_DASHBOARD_USERNAME || 'admin' }}
          TRAEFIK_DASHBOARD_PASSWORD: ${{ secrets.TRAEFIK_DASHBOARD_PASSWORD || 'admin' }}
        with:
          host: ${{ env.SERVER_SSH_HOST }}
          username: ${{ env.SERVER_SSH_USER }}
          password: ${{ env.SERVER_SSH_PASSWORD }}
          port: ${{ env.SERVER_SSH_PORT }}
          envs: TRAEFIK_DASHBOARD_USERNAME,TRAEFIK_DASHBOARD_PASSWORD,DOMAIN,ACME_EMAIL
          script: |
            cd $HOME/docker-compose.yml

            ENCRYPTED_TRAEFIK_PASSWORD=$(htpasswd -nbs $TRAEFIK_DASHBOARD_USERNAME $TRAEFIK_DASHBOARD_PASSWORD | cut -d ':' -f 2)

            echo "TRAEFIK_CONTAINER_NAME=workspeace-traefik" >> .env
            echo "TRAEFIK_BASE_HOST=$DOMAIN" >> .env
            echo "TRAEFIK_ACME_EMAIL=$ACME_EMAIL" >> .env
            echo "TRAEFIK_DASHBOARD_USERNAME=$TRAEFIK_DASHBOARD_USERNAME" >> .env
            echo "TRAEFIK_DASHBOARD_PASSWORD=$ENCRYPTED_TRAEFIK_PASSWORD" >> .env
            echo "TRAEFIK_RESTART_POLICY=always" >> .env

            docker compose up traefik -d
            ufw-docker allow workspeace-traefik
  vscode:
    name: VSCode
    runs-on: ubuntu-latest
    needs:
      - htpasswd
      - traefik
    steps:
      - name: Starts or stops VSCode using SSH
        uses: appleboy/ssh-action@v0.1.7
        env:
          START_VSCODE: ${{ github.event.inputs.vscode }}
          VSCODE_USERNAME: ${{ secrets.VSCODE_USERNAME || 'admin' }}
          VSCODE_PASSWORD: ${{ secrets.VSCODE_PASSWORD || 'admin' }}
        with:
          host: ${{ env.SERVER_SSH_HOST }}
          username: ${{ env.SERVER_SSH_USER }}
          password: ${{ env.SERVER_SSH_PASSWORD }}
          port: ${{ env.SERVER_SSH_PORT }}
          envs: START_VSCODE,VSCODE_USERNAME,VSCODE_PASSWORD
          script: |
            cd $HOME/docker-compose.yml

            if [ $START_VSCODE = 'true' ]
            then
              ENCRYPTED_VSCODE_PASSWORD=$(htpasswd -nbs $VSCODE_USERNAME $VSCODE_PASSWORD | cut -d ':' -f 2)

              echo "VSCODE_CONTAINER_NAME=workspeace-vscode" >> .env
              echo "VSCODE_TRAEFIK_USERNAME=$VSCODE_USERNAME" >> .env
              echo "VSCODE_TRAEFIK_PASSWORD=\"$ENCRYPTED_VSCODE_PASSWORD\"" >> .env
              echo "VSCODE_RESTART_POLICY=unless-stopped" >> .env
              docker compose up vscode -d
            else
              docker compose stop vscode
            fi
  pgadmin:
    name: pgAdmin
    runs-on: ubuntu-latest
    needs:
      - traefik
    steps:
      - name: Starts or stops pgAdmin using SSH
        uses: appleboy/ssh-action@v0.1.7
        env:
          START_PGADMIN: ${{ github.event.inputs.pgadmin }}
          PGADMIN_USERNAME: ${{ secrets.PGADMIN_USERNAME || 'admin@admin.com' }}
          PGADMIN_PASSWORD: ${{ secrets.PGADMIN_PASSWORD || 'admin' }}
        with:
          host: ${{ env.SERVER_SSH_HOST }}
          username: ${{ env.SERVER_SSH_USER }}
          password: ${{ env.SERVER_SSH_PASSWORD }}
          port: ${{ env.SERVER_SSH_PORT }}
          envs: START_PGADMIN,PGADMIN_USERNAME,PGADMIN_PASSWORD
          script: |
            cd $HOME/docker-compose.yml

            if [ $START_PGADMIN == 'true' ]
            then
              echo "PGADMIN_CONTAINER_NAME=workspeace-pgadmin" >> .env
              echo "PGADMIN_DEFAULT_EMAIL=$PGADMIN_USERNAME" >> .env
              echo "PGADMIN_DEFAULT_PASSWORD=$PGADMIN_PASSWORD" >> .env
              echo "PGADMIN_RESTART_POLICY=unless-stopped" >> .env
              docker compose up pgadmin -d
            else
              docker compose stop pgadmin
            fi
  hoppscotch:
    name: Hoppscotch
    runs-on: ubuntu-latest
    needs:
      - traefik
    steps:
      - name: Starts or stops Hoppscotch using SSH
        uses: appleboy/ssh-action@v0.1.7
        env:
          START_HOPPSCOTCH: ${{ github.event.inputs.hoppscotch }}
        with:
          host: ${{ env.SERVER_SSH_HOST }}
          username: ${{ env.SERVER_SSH_USER }}
          password: ${{ env.SERVER_SSH_PASSWORD }}
          port: ${{ env.SERVER_SSH_PORT }}
          envs: START_HOPPSCOTCH
          script: |
            cd $HOME/docker-compose.yml

            if [ $START_HOPPSCOTCH == 'true' ]
            then
              echo "HOPPSCOTCH_CONTAINER_NAME=workspeace-hoppscotch" >> .env
              echo "HOPPSCOTCH_RESTART_POLICY=unless-stopped" >> .env
              docker compose up hoppscotch -d
            else
              docker compose stop hoppscotch
            fi
  postgresql:
    name: PostgreSQL
    runs-on: ubuntu-latest
    needs:
      - compose
      - docker
      - firewall
    steps:
      - name: Starts or stops PostgreSQL using SSH
        uses: appleboy/ssh-action@v0.1.7
        env:
          START_POSTGRESQL: ${{ github.event.inputs.postgresql }}
          POSTGRESQL_USER: ${{ secrets.POSTGRESQL_USER || 'admin' }}
          POSTGRESQL_PASSWORD: ${{ secrets.POSTGRESQL_PASSWORD || 'admin' }}
        with:
          host: ${{ env.SERVER_SSH_HOST }}
          username: ${{ env.SERVER_SSH_USER }}
          password: ${{ env.SERVER_SSH_PASSWORD }}
          port: ${{ env.SERVER_SSH_PORT }}
          envs: START_POSTGRESQL,POSTGRESQL_USER,POSTGRESQL_PASSWORD
          script: |
            cd $HOME/docker-compose.yml

            if [ $START_POSTGRESQL == 'true' ]
            then
              echo "POSTGRESQL_CONTAINER_NAME=workspeace-postgres" >> .env
              echo "POSTGRESQL_USER=$POSTGRESQL_USER" >> .env
              echo "POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD" >> .env    
              echo "POSTGRESQL_RESTART_POLICY=unless-stopped" >> .env
              docker compose up postgres -d
            else
              docker compose stop postgres
            fi
  redisinsight:
    name: RedisInsight
    runs-on: ubuntu-latest
    needs:
      - traefik
    steps:
      - name: Starts or stops RedisInsight using SSH
        uses: appleboy/ssh-action@v0.1.7
        env:
          START_REDISINSIGHT: ${{ github.event.inputs.redisinsight }}
        with:
          host: ${{ env.SERVER_SSH_HOST }}
          username: ${{ env.SERVER_SSH_USER }}
          password: ${{ env.SERVER_SSH_PASSWORD }}
          port: ${{ env.SERVER_SSH_PORT }}
          envs: START_REDISINSIGHT
          script: |
            cd $HOME/docker-compose.yml

            if [ $START_REDISINSIGHT == 'true' ]
            then
              echo "REDISINSIGHT_CONTAINER_NAME=workspeace-redisinsight" >> .env
              echo "REDISINSIGHT_RESTART_POLICY=unless-stopped" >> .env
              docker compose up redisinsight -d
            else
              docker compose stop redisinsight
            fi
  cleanup:
    name: Clean Up
    runs-on: ubuntu-latest
    needs:
      - vscode
      - pgadmin
      - postgresql
      - redisinsight
    steps:
      - name: Cleans up server using SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.SERVER_SSH_HOST }}
          username: ${{ env.SERVER_SSH_USER }}
          password: ${{ env.SERVER_SSH_PASSWORD }}
          port: ${{ env.SERVER_SSH_PORT }}
          script: |
            docker image prune --all --force
